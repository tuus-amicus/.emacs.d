#+TITLE: Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Before start
  Setup repositories for package and auto download use-package if it's missing.
  This is article [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]] explains why you should use TLS connection with package resources.
  Secure environment include code to enable TLS and trust connections to package repositories.
  It may need *gnutls* & *python* installed before 

  SETUP CONSTANTS:
  #+BEGIN_SRC emacs-lisp
    (defconst private-dir  (expand-file-name "private" user-emacs-directory))
    (defconst temp-dir (format "%s/cache" private-dir)
      "Hostname-based elisp temp directories")
  #+END_SRC

* Package management

First of all, [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Package-Archives][ELPA]] is the name of a specification, the Emacs Lisp Package Archive. There's three widely known implementations of that specification:

- GNU ELPA
- Marmalade
- MELPA

[[http://elpa.gnu.org/][GNU ELPA]] is the official GNU Emacs archive, enabled out of the box for sufficiently new Emacs installations. It is comparatively small, contributing to it requires copyright assignment and cooperating with the official mailing list. It is the closest thing we have to a vetting comparable to a Linux distribution package archive.

[[https://marmalade-repo.org/][Marmalade]] is an unofficial archive with a good amount of versioned packages. Authors and maintainers need to upload their releases manually to it. Vetting is done once for every new member before allowing them to have an user account, after that is done, they are free to release as they wish.

[[https://melpa.org/#/][MELPA]] is another unofficial archive with the largest amount of packages. Each package is briefly vetted for code style with its pull request for inclusion, after that packages are automatically built from their (usually VCS) sources. Rebuilds can happen every hour. There is also MELPA stable which builds tagged releases only, but has a lot less packages, less even than Marmalade.

** Unsecure environment (but more workable)

 Setup repositories for package and auto download use-package if it's missing.
   #+BEGIN_SRC emacs-lisp
     (require 'package)

     (setq package-archives
           '(("melpa-stable" . "https://stable.melpa.org/packages/")
             ("melpa"        . "https://melpa.org/packages/")
             ("gnu"          . "https://elpa.gnu.org/packages/")
             ("org"          . "https://orgmode.org/elpa/")))
             
     (package-initialize)

     (when (not package-archive-contents)
       (package-refresh-contents))

     (setq package-enable-at-startup nil)

     ;; Pin melpa-stable for packages not under use-package control, i.e
     ;; dependencies and use-package itself.
     (setq package-pinned-packages
           '((use-package . "melpa-stable")
             ;; Deps
             (async       . "melpa-stable")
             (bind-key    . "melpa-stable")
             (dash        . "melpa-stable")
             (diminish    . "melpa-stable")
             (epl         . "melpa-stable")
             (git-commit  . "melpa-stable")
             (magit-popup . "melpa-stable")
             (pkg-info    . "melpa-stable")
             (popup       . "melpa-stable")
             (s           . "melpa-stable")
             (with-editor . "melpa-stable")))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (unless (package-installed-p 'diminish)
       (package-install 'diminish))
   #+END_SRC

   Let use-package handle all the packages I use
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (require 'use-package))
     (require 'diminish)                ;; if you use :diminish
     (require 'bind-key)                ;; if you use any :bind variant
   #+END_SRC

   Install missing packages.
   #+BEGIN_SRC emacs-lisp
     (setq use-package-always-ensure t)
   #+END_SRC
** COMMENT Secure environment

  ;; Should be tested it on linux and mac. 'cuz python may not be installed
  Because Emacs does not distribute trust root certificates. Although the set of cabforum certificates are already probably on your computer in various forms,
  you still have to acquire them in a format usable by Emacs somehow. There are a variety of ways, but in the interests of brevity and cross-platform compatibility, 
  my preferred mechanism is to get the certifi package from PyPI, with python -m pip install --user certifi or similar.

  #+BEGIN_SRC shell :exports none
  python -m pip install --user certifi
  #+END_SRC
  
  There is code which enables trusted certificate to download from repos
  Maybe you'll need *gnutls* & *python* installed first
  #+BEGIN_SRC emacs-lisp
  (require 'cl)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))
  #+END_SRC
  Each archive will write its files in a separate archive directory. 
I set secure connection to package repository and because the default setting for package-archives is to use the HTTP access to the GNU archive, I set the variable to `nil` before adding the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp

  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (defvar org-elpa '("org" . "http://orgmode.org/elpa/"))

  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)
  (add-to-list 'package-archives org-elpa t)
#+end_src

Initialize the archive and refresh the contents in case there is no cached archive.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC
 
At each *load the package* list will be evaluated and any missing
packages will be installed. The *packages-install* function deals with
this check and takes care of any loading of the packages.

#+name: credmp-package-installer
#+begin_src emacs-lisp
  (defun packages-install (&rest packages)
    (message "running packages-install")
    (mapc (lambda (package)
            (let ((name (car package))
                  (repo (cdr package)))
              (when (not (package-installed-p name))
                (let ((package-archives (list repo)))
                  (package-initialize)
                  (package-install name)))))
          packages)
    (package-initialize)
    (delete-other-windows))
#+end_src

**** Package with dependencies

#+name: credmp-package-installer
#+begin_src emacs-lisp
  ;; Install extensions if they're missing
  (defun init--install-packages ()
    (message "Lets install some packages")
    (packages-install
     ;; Since use-package this is the only entry here
     ;; ALWAYS try to use use-package!
     (cons 'use-package melpa)
     ))

  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
#+end_src

**** Diminish modes
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

* Customizations
** UI
Setup graphic. Font, themes, column displays
*** Maximize work area
Disable the menu, tool and scroll bar since they just take up space.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (when (window-system) (scroll-bar-mode 0))
#+END_SRC
*** Font
    Set font and font size
    #+BEGIN_SRC emacs-lisp
      (set-frame-font "Hack-12" nil t)
    #+END_SRC
*** Column number
Show column number in the info bar
   #+BEGIN_SRC emacs-lisp
      (column-number-mode 1)
   #+END_SRC
*** Org-mode
Add beautifull visualisation of paragraphs instead of asterix
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
    :config
    (setq org-hide-leading-stars t)
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode t)))
  )
#+END_SRC
** Behaviour
*** Paths / Environment
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize)
  (add-to-list 'exec-path "/usr/local/bin/virtualenv"))
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "PYTHONPATH"))
#+END_SRC

*** Recent Files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-save-file (recentf-expand-file-name "~/.emacs.d/private/cache/recentf"))
  (recentf-mode 1))
#+END_SRC

*** Default
Changing the default emacs behavior
   #+BEGIN_SRC emacs-lisp
     (setq-default
      load-prefer-newer t                ;; Avoid loading outdated byte code files.
      inhibit-splash-screen t            ;; Dismiss the startup screen.
      initial-scratch-message "")        ;; Empty scratch buffer.
     (show-paren-mode 1)                ;; Highlight matching brackets.

     ;; UTF8
     (set-charset-priority 'unicode)
     (setq locale-coding-system   'utf-8)   ; pretty
     (set-terminal-coding-system  'utf-8)   ; pretty
     (set-keyboard-coding-system  'utf-8)   ; pretty
     (set-selection-coding-system 'utf-8)   ; please
     (prefer-coding-system        'utf-8)   ; with sugar on top
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

     ;; Emacs customizations
     (setq
          ;; Disable non selected window highlight
          cursor-in-non-selected-windows     nil
          highlight-nonselected-windows      nil
          indent-tabs-mode                   nil)           ;; Don't use tab for indenting.
   #+END_SRC

*** Frames
 Don't open files from the workspace in a new frame
#+name: credmp-trash
#+begin_src emacs-lisp
  (setq ns-pop-up-frames nil)
#+end_src
*** Scrolling
#+BEGIN_SRC emacs_lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC
*** Desktop
#+BEGIN_SRC emacs-lisp
;; Saving history and sessions
;; Somewhy enabling that options disable theme, fonts, etc.
(desktop-save-mode 1)
(savehist-mode 1)
#+END_SRC

*** Grep-find
Open grep-find in current window
#+begin_src emacs-lisp
(eval-when-compile (require 'cl))
(defun kill-grep-window ()
  (destructuring-bind (window major-mode)
      (with-selected-window (next-window (selected-window))
        (list (selected-window) major-mode))
    (when (eq major-mode 'grep-mode)
      (delete-window window))))

(add-hook 'next-error-hook 'kill-grep-window)
#+end_src

*** COMMENT Default bash vs zsh
#+begin_src emacs-lisp
  ;; Setup /bin/bash as default bash instead of zsh
  ;; Disabling it. Otherwise we lost aliases and paths from zsh
  ;(setq-default explicit-shell-file-name "/bin/bash")
#+end_src

*** Yes / No (y/n)
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Mac keys 
Change command to meta, and ignore option to use weird Norwegian
keyboard

#+name: credmp-keys
#+begin_src emacs-lisp
  (setq mac-option-modifier 'none)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper)
#+end_src
*** COMMENT Line numbers
HighLight current line-number
LINUM:
displaying line numbers in a buffer, or otherwise indicating line numbers, 
without actually changing the buffer content. 
If you just want to work on a specific part of the file and you are accustomed to doing that by showing line numbers 
in the margin, try BasicNarrowing instead.
#+BEGIN_SRC emacs-lisp
  ;; (use-package hlinum						;
  ;;   :config
  ;;   (hlinum-activate))

  ;; (use-package linum
  ;;   :config
  ;;   (setq linum-format " %3d ")
  ;;   (global-linum-mode nil))
#+END_SRC
** Backup / autosave
   One annoying thing with emacs is it that it leaves backup files all
   over the place.  Fixing that by dumping all backup/autosave files
   in to one directory.
   #+BEGIN_SRC emacs-lisp
     ;; Check if directories with backups exists, create if not
     ;; (if (not (file-exists-p backup-dir))
     ;;     (make-directory backup-dir t))

     ;; (if (not (file-exists-p autosave-dir))
     ;;     (make-directory autosave-dir t))

     ;; Backups enabled, use nil to disable
     (setq
      history-length                     1000
      backup-inhibited                   nil
      make-backup-files                  t
      auto-save-default                  t ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      auto-save-list-file-name           (concat temp-dir "/autosave")
      make-backup-files                  t ; backup of a file the first time it is saved.
      create-lockfiles                   nil
      version-control t                 ; version numbers for backup files
      ;; backup-by-copying t            ; don't clobber symlinks
      delete-old-versions t             ; delete excess backup files silently
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      delete-by-moving-to-trash t
      backup-directory-alist            `((".*" . ,(concat temp-dir "/backup/")))
      auto-save-file-name-transforms    `((".*" ,(concat temp-dir "/auto-save-list/") t)))

     (unless (file-exists-p (concat temp-dir "/auto-save-list"))
       (make-directory (concat temp-dir "/auto-save-list") :parents))
     (setq delete-by-moving-to-trash t
           trash-directory "~/.Trash/emacs")
   #+END_SRC

** Theme
Point emacs to where it can find the themes.
   #+BEGIN_SRC emacs-lisp
     ;;     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/arjen-grey-theme")
     ;; Install theme. Use only ' load-theme '
     (use-package zenburn-theme
      :ensure t
     )

     (use-package arjen-grey-theme
        :ensure t
        :config
     (load-theme 'arjen-grey t))
   #+END_SRC

* Packages
** Emacs
*** Wgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep)
#+END_SRC
*** Projects
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (setq projectile-known-projects-file
        (expand-file-name "projectile-bookmarks.eld" temp-dir))
  
  (setq projectile-completion-system 'ivy)
  
  (projectile-global-mode))
#+END_SRC

*** Winner mode 
Resumes closed windows
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
      (winner-mode 1))
#+END_SRC
*** Ivy / Swipper / Councel
Use the counsel and swiper packages to make the use of M-x and search a lot easier.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ("M-E" . counsel-recentf)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package fzf
     :ensure t
     :bind
     ("C-c z" . counsel-fzf)
  )
  (use-package swiper
    :pin melpa-stable
    :diminish ivy-mode
    :ensure t
    :bind*
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)
     ("C-x C-f" . counsel-find-file)
     ("C-c h f" . counsel-describe-function)
     ("C-c h v" . counsel-describe-variable)
     ("C-c i u" . counsel-unicode-char)
     ("M-i" . counsel-imenu)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ;;      ("C-c l" . scounsel-locate)
     )
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
      (ivy-set-actions
       'counsel-find-file
       '(("d" (lambda (x) (delete-file (expand-file-name x)))
          "delete"
          )))
      (ivy-set-actions
       'ivy-switch-buffer
       '(("k"
          (lambda (x)
            (kill-buffer x)
            (ivy--reset-state ivy-last))
          "kill")
         ("j"
          ivy--switch-buffer-other-window-action
          "other window")))))

  (use-package ag :ensure t) ;; for counsel-ag
  
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))

  (use-package ivy-hydra :ensure t)
#+END_SRC

*** Imenu
;;  imenu to navigate through function definitions
;; Maybe swipper or councel is analog of that command
#+BEGIN_SRC emacs-lisp
(use-package imenu
    :bind (("<f7>" . imenu)) ;; Вызов imenu по F7
    :ensure t
    :config
    (setq imenu-auto-rescan  t) ;; automaticaly refresh list of functions in buffer
    (setq imenu-use-popup-menu nil) ;; dialogs Imenu only in minibuffer
)
#+END_SRC
*** Avy
Navigate by searching for a letter on the screen and jumping on it
C-s inside avy, press C-c SPC to find by char
 #+BEGIN_SRC emacs-lisp
      (use-package avy
        :config
        (setq avy-all-windows nil)
        (setq avy-background t)
        :bind (("M-j" . avy-goto-char))
        :pin melpa-stable)
    #+END_SRC
*** ediff 
This file documents Ediff, a comprehensive visual interface to Unix diff and patch utilities.
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
  (setq-default ediff-highlight-all-diffs 'nil)
  (setq ediff-diff-options "-w"))
#+END_SRC

*** Discover-ability
Pressing command with delay pops up in minibuffer list of commands with descriptions (HOT KEYS)
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

*** Buffer management (ace-window)
Easy move between seperate buffers
#+name: credmp-window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :defer 1
    :config
    (global-set-key (kbd "C-x o") 'ace-window)
    (set-face-attribute
     'aw-leading-char-face nil
     :foreground "deep sky blue"
     :weight 'bold
     :height 3.0)
    (set-face-attribute
     'aw-mode-line-face nil
     :inherit 'mode-line-buffer-id
     :foreground "lawn green")
    (setq aw-dispatch-always t
          aw-dispatch-alist
          '((?x aw-delete-window "Ace - Delete Window")
            (?c aw-swap-window "Ace - Swap Window")
            (?n aw-flip-window)
            (?v aw-split-window-vert "Ace - Split Vert Window")
            (?h aw-split-window-horz "Ace - Split Horz Window")
            (?m delete-other-windows "Ace - Maximize Window")
            (?g delete-other-windows)
            (?b balance-windows)
            (?u (lambda ()
                  (progn
                    (winner-undo) ;; Undo closed windows
                    (setq this-command 'winner-undo))))
            (?r winner-redo)
      ;      (?? aw-show-dispatch-help "Show-dispatch-help")
            )) ;; setq and aw-dispatch

    ;; Hydra config. 
    (when (package-installed-p 'hydra)
      (defhydra hydra-window-size (:color red)
        "Windows size"
        ("h" shrink-window-horizontally "shrink horizontal")
        ("j" shrink-window "shrink vertical")
        ("k" enlarge-window "enlarge vertical")
        ("l" enlarge-window-horizontally "enlarge horizontal"))
     (add-to-list 'aw-dispatch-alist '(?w hydra-window-size/body) t))) ;; Link 'aw-dispatch-alist with ?w hotkey on hydra-window-size/body command

  (use-package ace-jump-mode
    :ensure t
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+end_src
*** ibuffer
     Use ibuffer instead of list-buffers, has some neat features.

     Sort buffers by placing them in different groups. Hide empty
     groups to avoid cluttering the ibuffer.
     #+BEGIN_SRC emacs-lisp
       (use-package ibuffer
         :bind (("<f8>" . ibuffer)) ;; Вызов по F8
         :config
         (defalias 'list-buffers 'ibuffer)
         (setq-default ibuffer-expert t ;; Don't ask when closing unmodified buffers
                       ibuffer-show-empty-filter-groups nil)
         (setq ibuffer-saved-filter-groups
               '(("default"
                  ("c++" (mode . c++-mode))
                  ("make"  (or (mode . makefile-gmake-mode)
                               (mode . makefile-mode)))
                  ("cmake" (mode . cmake-mode ))
                  ("scripts" (mode . sh-mode))
                  ("ag" (mode . ag-mode ))
                  ("docs" (or (mode . rst-mode)
                              (mode . Man-mode)))
                  ("org" (mode . org-mode))
                  ("dired" (mode . dired-mode))
                  ("python" (mode . python-mode))
                  ("vc" (or (mode . vc-dir-mode)
                            (mode . magit--turn-on-shift-select-mode)
                            (mode . magit-auto-revert-mode)
                            (mode . magit-blame-disable-mode)
                            (mode . magit-blame-disabled-mode)
                            (mode . magit-blame-mode)
                            (mode . magit-blame-put-keymap-before-view-mode)
                            (mode . magit-blob-mode)
                            (mode . magit-cherry-mode)
                            (mode . magit-diff-mode)
                            (mode . magit-file-mode)
                            (mode . magit-log-mode)
                            (mode . magit-log-select-mode)
                            (mode . magit-merge-preview-mode)
                            (mode . magit-popup-mode)
                            (mode . magit-process-mode)
                            (mode . magit-process-unset-mode)
                            (mode . magit-reflog-mode)
                            (mode . magit-refs-mode)
                            (mode . magit-repolist-mode)
                            (mode . magit-revision-mode)
                            (mode . magit-stash-mode)
                            (mode . magit-stashes-mode)
                            (mode . magit-status-mode)
                            (mode . magit-submodule-list-mode)
                            (mode . magit-turn-on-auto-revert-mode)
                            (mode . magit-wip-after-apply-mode)
                            (mode . magit-wip-after-save-local-mode)
                            (mode . magit-wip-after-save-mode)
                            (mode . magit-wip-before-change-mode)))
                  ("shell" (mode . shell-mode))
                  ("gdb" (mode . gdb-script-mode))
                  ("emacs" (name . "^\\*[[:alnum:]]+\\*$")))))
       (add-hook 'ibuffer-mode-hook
                 (lambda ()
                   (ibuffer-auto-mode 1) ;; Keep the ibuffer in sync
                   (ibuffer-switch-to-saved-filter-groups "default"))))
     #+END_SRC
*** Hydra
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
Imagine that you have bound C-c j and C-c k in your config. You want to call C-c j and C-c k in some (arbitrary) sequence. Hydra allows you to:

Bind your functions in a way that pressing C-c jjkk3j5k is equivalent to pressing C-c j C-c j C-c k C-c k M-3 C-c j M-5 C-c k. Any key other than j or k exits this state.

Assign a custom hint to this group of functions, so that you know immediately after pressing C-c that you can follow up with j or k.
[[https://github.com/abo-abo/hydra][More here]]

#+BEGIN_SRC emacs-lisp
    (use-package hydra 
      :ensure hydra
      :init 
   
     ;; Toogle visual modes
      (global-set-key
      (kbd "C-x t")
          (defhydra toggle (:color blue)
            "toggle"
            ("a" abbrev-mode "abbrev")
            ("s" flyspell-mode "flyspell")
            ("d" toggle-debug-on-error "debug")
            ("c" fci-mode "fCi")
            ("f" auto-fill-mode "fill")
            ("t" toggle-truncate-lines "truncate")
            ("w" whitespace-mode "whitespace")
            ("q" nil "cancel")))

      ;; GotoLine
      (global-set-key
       (kbd "C-x j")
       (defhydra gotoline 
         ( :pre (linum-mode 1)
            :post (linum-mode -1))
         "goto"
         ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
         ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
         ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
         ("e" (lambda () (interactive)(end-of-buffer)) "end")
         ("c" recenter-top-bottom "recenter")
         ("n" next-line "down")
         ("p" (lambda () (interactive) (forward-line -1))  "up")
         ("g" goto-line "goto-line")
         ))

      ;; Org-mode
      ;; (global-set-key
      ;;  (kbd "C0:00:00 -c t")
      ;;  (defhydra hydra-global-org (:color blue)
      ;;    "Org"
      ;;    ("t" org-timer-start "Start Timer")
      ;;    ("s" org-timer-stop "Stop Timer")
      ;;    ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
      ;;    ("p" org-timer "Print Timer") ; output timer value to buffer
      ;;    ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
      ;;    ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
      ;;    ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
      ;;    ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
      ;;      ("l" (or )rg-capture-goto-last-stored "Last Capture")))
      ;; use-package hydra
      )
       ;; Multiple-cursors
  (defhydra multiple-cursors-hydra (:hint nil)
    "
       ^Up^            ^Down^        ^Other^
  ----------------------------------------------
  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
  [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
  ^ ^             ^ ^             [_q_] Quit
  "
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("r" mc/mark-all-in-region-regexp :exit t)
    ("q" nil)

    ("<mouse-1>" mc/add-cursor-on-click)
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore))

#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
   (eval-after-load "org-indent" '(diminish 'org-indent-mode))
#+END_SRC

*** Folders as tree Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :bind (("<f6>" . neotree-toggle))
  :config
  (setq neo-theme 'icons
        neotree-smart-optn t
        neo-window-fixed-size nil))
  ;; Disable linum for neotree
  ;(add-hook 'neo-after-create-hook 'disable-neotree-hook))
#+END_SRC

*** Undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  ;; Remember undo history
  (setq
   undo-tree-auto-save-history nil
   undo-tree-history-directory-alist `(("." . ,(concat temp-dir "/undo/"))))
  (global-undo-tree-mode 1))
#+END_SRC

*** UI
**** [[https://github.com/domtronn/all-the-icons.el][AllTheIcons]] & [[https://github.com/domtronn/all-the-icons.el/tree/master/fonts][Fonts]]
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :config
    (setq all-the-icons-color-icons t
          all-the-icons-for-buffer t)
    :pin melpa-stable)
#+END_SRC

First time you need to install fonts:
#+BEGIN_SRC emacs-lisp :tangle no
(all-the-icons-install-fonts)
#+END_SRC
**** Ivy all-the-icons
add find-file icons visualization
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy
:init (all-the-icons-ivy-setup)
)
#+END_SRC
**** Modeline customization
Setup doomemacs modeline
A fancy and fast mode-line inspired by minimalism design.

It's integrated into [[https://github.com/hlissner/doom-emacs][Doom Emacs]] and [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]].

For more info [[https://github.com/seagle0128/doom-modeline][GithubProject]]
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :pin melpa-stable)
#+END_SRC

This package requires the fonts included with all-the-icons to be installed. 
Run M-x all-the-icons-install-fonts to do so. Please refer to the installation guide.
** Programming
*** Magit (Version Control)
Magit is the only thing you need when it comes to Version Control (Git)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c m" . magit-status))
    :pin melpa-stable)

  (use-package magit-gitflow
    :ensure t
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow)
    :pin melpa-stable)
#+END_SRC

Display the buffer state in the fringe.

#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode +1))
#+end_src
*** AutoComplete
 Packages that helps speed up coding, i.e. auto complete, boiler plates etc
**** Autocomplete
Some people choose Autocomple, some Company. I choose both
Also auto-complete filepaths
#+begin_src emacs-lisp
(use-package auto-complete 
    :ensure t
    :init
(progn
   (ac-config-default)
      (global-auto-complete-mode t)
 ))
#+end_src
**** Company
  Configure company to work similar to auto complete. Disabled most
     backends for c++ when at work as they were either slow, failed to
     find a completion half the time or flat out crashed clang when
     trying to complete stuff. The company-dabbrev-code works similar
     to what I had before with ac.

#+BEGIN_SRC emacs-lisp
       (use-package company
       ;:disabled t
       :bind ( ("C-<tab>" . company-complete-common)
                 :map company-active-map
                 ("C-n" . company-select-next)
                 ("C-p" . company-select-previous))
         :init
         ;; List what modes to use company in.
         (add-hook 'after-init-hook 'global-company-mode)
         :config
         (setq company-global-modes '(not shell-mode gud-mode)
               company-idle-delay 0.1
               company-minimum-prefix-length 3
               company-clang-insert-arguments nil
              ; company-dabbrev-downcase nil
              ; company-dabbrev-ignore-case nil
               company-dabbrev-other-buffers t
               company-dabbrev-code-other-buffers t)

         (add-hook 'org-mode-hook
                   (lambda ()
                     ;; Remove dabbrev from org-mode as it's driving me crazy! (not me, exactly)
                     ;(set (make-local-variable 'company-backends)
                     ;     (setq-local company-backends
                     ;                 (delete 'company-dabbrev company-backends)))

                     ;; Fixing capf to work with org-mode
                     ;; https://emacs.stackexchange.com/a/21173
                     (add-hook 'completion-at-point-functions
                               'pcomplete-completions-at-point nil t)))

         (add-hook 'emacs-lisp-mode-hook
                   (lambda ()
                     (set (make-local-variable 'company-backends)
                          '((company-capf
                             company-dabbrev-code
                             :separate)))))

         ;; Only reliable backend at work for c-mode         ;; environment
         ; (when i-am-working
         (add-hook 'c-mode-common-hook
                  (lambda ()
                      (set (make-local-variable 'company-backends)
                           '(company-dabbrev-code))))
         ; )
         :pin melpa-stable)
#+END_SRC

#+BEGIN_SRC emacs-lisp
       ;; Shell autocomplete
       (use-package company-shell
         :disabled t
         :after (company)
         :config
         :pin melpa-stable)

#+END_SRC
     
 #+BEGIN_SRC emacs-lisp
   ;; Python autocomplete
   ;; (defun my/python-mode-hook ()
   ;; (add-to-list 'company-backends 'company-jedi))

   (use-package company-jedi
     :ensure t
     :after (company)
     :config
     (autoload 'jedi:setup "jedi" nil t)
     (add-hook 'python-mode-hook 'jedi:setup)
     (add-to-list 'company-backends 'company-jedi))
   ;  (add-hook 'python-mode-hook 'my/python-mode-hook) 
  #+END_SRC 
     
 Tell emacs it's safe to change these company variables in a
 .dir-locals.el file.
 #+BEGIN_SRC emacs-lisp
       (put 'company-clang-executable 'safe-local-variable #'stringp)
       (put 'company-clang-arguments 'safe-local-variable #'listp)
 #+END_SRC
**** Yasnippet
     Enable yasnippet
     #+BEGIN_SRC emacs-lisp
       (use-package yasnippet
         :config
         (yas-global-mode 1)
         ;(setq yas-indent-line nil)			
         :pin melpa-stable)
     #+END_SRC
*** Indent all (Format)
Formatting all by command. Tries to expect what file is and indenting it
#+BEGIN_SRC emacs-lisp
(use-package format-all :ensure t)
#+END_SRC

*** Lint
**** Flycheck

Enable flycheck globably.
Disable clang check, gcc check works better.
#+BEGIN_SRC emacs-lisp
       (use-package flycheck
         :config
         (add-hook 'after-init-hook #'global-flycheck-mode)
         (add-hook 'python-mode-hook             #'flycheck-mode)
         (add-hook 'js-mode-hook                 #'flycheck-mode)
         (add-hook 'web-mode-hook                #'flycheck-mode)
         (add-hook 'lisp-interaction-mode-hook   #'flycheck-mode)
         (add-hook 'fish-mode-hook               #'flycheck-mode)
         (add-hook 'markdown-mode-hook           #'flycheck-mode)
         (add-hook 'go-mode-hook                 #'flycheck-mode)
         (setq flycheck-check-syntax-automatically '(mode-enabled save idle-change))
         (setq flycheck-highlighting-mode 'lines)
         (setq flycheck-indication-mode 'left-fringe)
         (setq flycheck-checker-error-threshold 2000)
         
         ;; Current version of rst-sphinx for flycheck disabling it
         (add-to-list 'auto-mode-alist '("\\.rst\\'" .
                                         (lambda () (rst-mode) (flycheck-mode -1))))
         :pin melpa-stable)
#+END_SRC
*** Parenthes
#+BEGIN_SRC emacs-lisp
;; Also installs smartparens package
(use-package smartparens
  :ensure t
  :config
  (setq sp-show-pair-from-inside nil)
  (require 'smartparens-config)
  (add-hook 'python-mode-hook             #'smartparens-mode)
  (add-hook 'js-mode-hook                 #'smartparens-mode)
  (add-hook 'web-mode-hook                #'smartparens-mode)
  (add-hook 'lisp-interaction-mode-hook   #'smartparens-mode)
  (add-hook 'fish-mode-hook               #'smartparens-mode)
  (add-hook 'go-mode-hook                 #'smartparens-mode)
  (add-hook 'python-mode-hook #'smartparens-mode)
  :diminish smartparens-mode
)
#+END_SRC

** Web
*** Web mode

The web-mode is particularly good for editing HTML and Javascript files.

#+name: credmp-package-web
#+begin_src emacs-lisp
(use-package web-mode
    :ensure t
    :config
    ;; Files extensions to enable web-mode
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.xhtml?\\'" . web-mode))

    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-markup-indent-offset 2))

      (setq web-mode-ac-sources-alist
      '(("css" . (ac-source-css-property))
      ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
      ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

      (setq web-mode-engines-alist
      '(("django"    . "\\.html\\'")))

    (add-hook 'web-mode-hook  'my-web-mode-hook)
    :pin melpa-stable)

    (use-package less-css-mode
    :ensure t)
#+end_src
*** Emmet-mode
Includes an entirely new angle to writing markup, and it facilitates the feature by letting you write HTML based on CSS selectors. It’s so simple it’s confusing at first. I think it’s best explained by doing a quick before and after. If you were to type:

**div#name.one.two**
and follow that with the zen-coding plugin keystroke (CMD+E in TextMate), the plugin will reformat the line as:

**<div id="name" class="one two"></div>**
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'clojure-mode-hook 'emmet-mode)
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
#+END_SRC
*** JavaScript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
:ensure t
:ensure ac-js2
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

(use-package js2-refactor
:ensure t
:config 
(progn
(js2r-add-keybindings-with-prefix "C-c C-m")
;; eg. extract function with `C-c C-m ef`.
(add-hook 'js2-mode-hook #'js2-refactor-mode)))
(use-package tern
:ensure tern
:ensure tern-auto-complete
:config
(progn
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;;(tern-ac-setup)
))

;;(use-package jade
;;:ensure t
;;)

;; use web-mode for .jsx files
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))


;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)

;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")

;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))

;; adjust indents for web-mode to 2 spaces
(defun my-web-mode-hook ()
  "Hooks for Web mode. Adjust indents"
  ;;; http://web-mode.org/
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC 
** Programming languages
*** Python
Before setup configs, you need to install pip modules:

==pip3 / pip install jedi rope flake8 autopep8 yapf==
# Either of these
==pip install rope==
==pip install jedi==
# flake8 for code checks
==pip install flake8==
# and autopep8 for automatic PEP8 formatting
==pip install autopep8==
# and yapf for code formatting
==pip install yapf==

#+BEGIN_SRC emacs-lisp
(use-package python
    :mode ("\\.py" . python-mode)
    :config
    (use-package elpy
       :init
       (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
       :ensure t
       :config
       (setq elpy-rpc-backend "jedi")
       (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
       flycheck-python-flake8-executable "/usr/local/bin/flake8"
       :pin melpa-stable
       :bind (:map elpy-mode-map
	      ("M-." . elpy-goto-definition)
	      ("M-," . pop-tag-mark)))
      (elpy-enable))

;; Setup python3 as default
(setq py-python-command "python3")
(setq python-shell-interpreter "python3")

;; Add virtualenv support -> add mac environment
(when (memq window-system '(mac ns))
  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell)
    :pin melpa-stable)
)

(use-package pip-requirements
  :config
  (add-hook 'pip-requirements-mode-hook #'pip-requirements-auto-complete-setup))

(use-package py-autopep8)

(use-package pyenv-mode
  :if
  (executable-find "pyenv")
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.pyenv/versions/")
  :config
  (pyenv-mode)
  :bind
  ("C-x p e" . pyenv-activate-current-project))

(defun pyenv-init()
  (setq global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global")))
  (message (concat "Setting pyenv version to " global-pyenv))
  (pyenv-mode-set global-pyenv)
  (defvar pyenv-current-version nil global-pyenv))

(defun pyenv-activate-current-project ()
  "Automatically activates pyenv version if .python-version file exists."
  (interactive)
  (f-traverse-upwards
   (lambda (path)
     (message path)
     (let ((pyenv-version-path (f-expand ".python-version" path)))
       (if (f-exists? pyenv-version-path)
          (progn
            (setq pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8)))
            (pyenv-mode-set pyenv-current-version)
            (pyvenv-workon pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))))

(add-hook 'after-init-hook 'pyenv-init)
(add-hook 'projectile-after-switch-project-hook 'pyenv-activate-current-project)

#+END_SRC
*** Go
Go code helpers. [[https://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][see also]]

#+begin_src shell :tangle no
go get -u github.com/nsf/gocode
go get -u github.com/rogpeppe/godef
go get -u golang.org/x/tools/cmd/guru
go get -u golang.org/x/tools/cmd/goimports
#+end_src

Completion
#+begin_src emacs-lisp

  (use-package company-go
    :ensure t
    :config
    (setq company-tooltip-limit 20)                      ; bigger popup window
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)                          ; remove annoying blinking
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    (add-hook 'go-mode-hook (lambda ()
                              (set (make-local-variable 'company-backends) '(company-go))
                              (company-mode))))
#+end_src

Go uses tabs, so lets set the indent to a sane mode

#+begin_src emacs-lisp
(setq-default tab-width 4)
#+end_src

Packages that you need for a nice Go setup

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :bind (("C-c t t" . go-test-current-test)
           ("C-c t p" . go-test-current-project)
           ("C-c t c" . go-test-current-coverage)
           ("C-c t f" . go-test-current-file))
    :config
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save))

  (use-package go-guru
    :ensure t)

  (use-package go-errcheck
    :ensure t)

  ;; Yasnippets
  (use-package go-snippets
    :ensure t)

  ;; eldoc integration
  (use-package go-eldoc
    :ensure t)

  ;; (use-package gocode
  ;;   :ensure t)

  ;; (use-package godef
  ;;   :ensure t)

  (use-package gotest
    :ensure t)

  (use-package flycheck-gometalinter
    :ensure t
    :config
    (progn
      (flycheck-gometalinter-setup)))
#+end_src

*** Lisp 
Color haxvalues with their respective color.
    #+BEGIN_SRC emacs-lisp
      (use-package lisp-mode
        :ensure nil ; Built in
        :config
        (defvar hexcolour-keywords
          '(("#[[:xdigit:]]\\{6\\}"
             (0 (put-text-property (match-beginning 0)
                                   (match-end 0)
                                   'face (list :background
                                               (match-string-no-properties 0)))))))
        (add-hook 'lisp-mode-hook
                  (lambda ()
                    (setq show-trailing-whitespace t)
                    (font-lock-add-keywords nil hexcolour-keywords))))
    #+END_SRC

** DevOps
*** Docker
** Texts
*** Markdown
    #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
             ("\\.md\\'" . markdown-mode)
             ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown")
       :pin melpa-stable)
    #+END_SRC

*** Multi-cursors
Keybindings for the mc package
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
    ;;;When you have an active region that spans multiple lines, the following will add a cursor to each line:
    :bind (("C-S-c C-S-c" . mc/edit-lines)
    ;;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:s
    ("C->"         . mc/mark-next-like-this)
    ("C-<"         . mc/mark-previous-like-this)
    ("C-c C-<"     . mc/mark-all-like-this)
    ("C-+"         . mc/mark-next-like-this)
    ;; First mark the word, then add more cursors.
    ;;To get out of multiple-cursors-mode, press <return> or C-g. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j.
    ("C-S-<mouse-1>" . mc/add-cursor-on-click)
    :map mc/keymap
    ("C-c m n"     . mc/insert-numbers)
    ("C-c m c"     . mc/insert-characters)
    ("C-c m s n"   . mc/insert-same-numbers-per-line)
    ("C-c m s c"   . mc/insert-same-chars-per-line))
    :config
    :pin melpa-stable)
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package mc-extras
        :after (multiple-cursors)
        :pin melpa-stable)
#+END_SRC
* Key bindings / markup
** Buffer updating
#+begin_src emacs-lisp
(global-set-key (kbd "<f5>") 'revert-buffer)

(global-set-key (kbd "C-x C-b") 'buffer-menu) ;; List buffer in current window
#+end_src
** Org-mode markup
 *Bold* /italic/ =verbatim=, +strikethrough+
* Custom
** Indent whole buffer
#+BEGIN_SRC emacs-lisp
  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key (kbd "C-M-:") 'iwb)
#+END_SRC

** COMMENT Ring-bell
Disables sound from ring bell (on mac: 'bing'bing'bing')
#+BEGIN_SRC emacs-lisp
  ;; http://stackoverflow.com/questions/11679700/emacs-disable-beep-when-trying-to-move-beyond-the-end-of-the-document
  (defun my-bell-function ())

  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)
#+END_SRC

** COMMENT Plugins (disabled)
Load custom plugins/fucntions from folder depends on environment
#+BEGIN_SRC emacs-lisp
  ;; (use-package work
  ;;    :disabled t
  ;;    :if i-am-working
  ;;    :ensure nil
  ;;    :load-path "~/.emacs.d/plugins")
#+END_SRC

** Styles for c++
#+BEGIN_SRC emacs-lisp
  (c-add-style "dee-style" 
    '("linux"
    (c-basic-offset . 8)          ; indent by four spaces
    (tab-width . 8)               ; Tab width
    (indent-tabs-mode . t)        ; tabs
    (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
    (brace-list-open . 0)
    (statement-case-open . +)   ; Open braces ident from start of line
    (case-label . +)
    (substatement-open . 0))))) ; Open braces on the start of line
  
  (defun my-c++-mode-hook ()
    (c-set-style "dee-style")        ; use my-style defined above
    (auto-fill-mode)
    (add-hook 'c++-mode-hook 'my-c++-mode-hook))
    ; (c-toggle-auto-hungry-state 1) ; On new line, while put braces
#+END_SRC
* TODO / Install
** Important [17%]
- [ ] Setup by templates .org from other configs neeeded tools
- [ ] Install bookmarks projects/workflows
- [ ] Setup fzf with emacs. [0/1]
  - [ ] Setup gitignore (fd utility)
- [ ] Setup ibuffer (or buffer) to orginize content by file extensions or by modes
- [X] Python as IDE:  [[https://habr.com/ru/post/303600/][First tutor]]
- [ ] Setup python with yasnippets like sublime (auto indent, competition)
- [ ] Add autoindent and code suggestions in JS/HTML/CSS
- [ ] Read Hydra tutorials 
- [ ] [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][Speed up Emacs]] (Mac)
- [X] Setup counsel-fzf 
  * Try with hydra
    or
  * Try with setq counsel--fzf-directory or simmilar
- [X] Check how save backup files with # in .emacs.d only
- [ ] Install indent XML and JSON. Code snippets for html and js
- [ ] Python support (highlight & autocomplete & indent & virtualenvironments)
- [ ] Add workspaces support (to quickly go to project)
- [ ] Add support of 'Find everywhere swipper or councel' find file -> type short, searches everywhere, starts ./*
- [-] Make as in [[https://github.com/hlissner/doom-emacs/tree/screenshots][DoomEmacs]]: [80%]
  - [ ] Tab emulation
  - [X] Visualization of files with icons, branches, etc.
  - [X] mode-line
  - [X] Line numberring(nlinum)
  - [X] Check company mode  
- [ ] Setup window management Hydra+ace-window [[https://github.com/abo-abo/hydra/wiki/Window-Management][Like this]]
** Can wait [1/6]
- [ ] Orgmode for GTD [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Here]]
- [ ] Setup [[https://github.com/emacs-dashboard/emacs-dashboard][Dashboard]]
- [ ] Add environment i-am-working (or mac) and search in current config 'i-am-working' how to load it
- [X] Add icons (like in sublime folders(left-panel))
- [ ] Add environment Macbook to load plugins for macbook (load-path ('.../macbook.el') or so, for example load paths for mac special)
- [ ] Add some usefull Hydra hotkeys (like gotoline)
- [ ] Customize your Mode-line [[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][here]]
** Packages to Install / Check
Check more plugins [[https://github.com/emacs-tw/awesome-emacs][Here]] [[https://xmodulo.com/best-plugins-to-increase-productivity-on-emacs.html][And here]]
There is list of packages i used to use. Check needed
==indent-guide==
==json-mode==
==pip-requirements==
==popup==
==powerline==
==py-autopep8==
==pyvenv==
==virtualenvwrapper==
==dash==
==python-environment==
==package==
==let-alist==
==py-isort==
==python-mode==
==ipython== ==MAYBE==

